(()=>{"use strict";var e={n:t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const t=require("dotenv"),n=require("jsmodbus");var i=e.n(n);const a=require("net");var r=e.n(a);const u=require("rxjs");var s=[{value:{targetweight:0},fc:3,unitid:1,address:5010,quantity:1},{value:{baglength:0},fc:3,unitid:1,address:5014,quantity:1},{value:{bagsperminute:0},fc:3,unitid:1,address:5016,quantity:1},{value:{topconehigh:0},fc:3,unitid:1,address:5032,quantity:1},{value:{topconelow:0},fc:3,unitid:1,address:5034,quantity:1},{value:{highlimitweight:0},fc:3,unitid:1,address:5048,quantity:1},{value:{sealtime:0},fc:3,unitid:1,address:5050,quantity:1},{value:{striplength:0},fc:3,unitid:1,address:5052,quantity:1},{value:{falltime:0},fc:3,unitid:1,address:5054,quantity:1},{value:{nominalweight:0},fc:3,unitid:1,address:5064,quantity:1},{value:{tne:0},fc:3,unitid:1,address:5066,quantity:1},{value:{fbdelay2:0},fc:3,unitid:1,address:5092,quantity:1},{value:{lvfdelay:0},fc:3,unitid:1,address:5094,quantity:1},{value:{wbdelay:0},fc:3,unitid:1,address:5098,quantity:1},{value:{wbopentime:0},fc:3,unitid:1,address:5100,quantity:1},{value:{fbopentime:0},fc:3,unitid:1,address:5104,quantity:1},{value:{staggerdelay:0},fc:3,unitid:1,address:5106,quantity:1},{value:{lowlowlimit:0},fc:3,unitid:1,address:5108,quantity:1},{value:{biasweight:0},fc:3,unitid:1,address:5110,quantity:1},{value:{striptime:0},fc:3,unitid:1,address:5112,quantity:1}];t.config();var l,o=new function(){this.keys={lowproducttime:0,robaguptime:0,interlocktime:0,runtime:0,pausedtime:0,faulttime:0,outoffilmtime:0,fullbags:0,targetweight:0,baglength:0,bagsperminute:0,topconehigh:0,topconelow:0,shiftefficiency:0,highlimitweight:0,sealtime:0,striplength:0,falltime:0,nominalweight:0,tne:0,fbdelay2:0,lvfdelay:0,wbdelay:0,wbopentime:0,fbopentime:0,staggerdelay:0,lowlowlimit:0,biasweight:0,striptime:0}},c=new(r().Socket),d=new(i().client.TCP)(c,1),f={host:process.env.HOST,port:parseInt(process.env.MODBUS_PORT)};!function(){try{c.on("connect",(function(){console.log("CONNECTED"),l=(0,u.interval)(5e3).subscribe((function(){!function(){var e,t,n,i;e=this,t=void 0,i=function(){var e,t,n,i,a,r,u,l;return function(e,t){var n,i,a,r,u={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return r={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function s(r){return function(s){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,i&&(a=2&r[0]?i.return:r[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,r[1])).done)return a;switch(i=0,a&&(r=[2&r[0],a.value]),r[0]){case 0:case 1:a=r;break;case 4:return u.label++,{value:r[1],done:!1};case 5:u.label++,i=r[1],r=[0];continue;case 7:r=u.ops.pop(),u.trys.pop();continue;default:if(!((a=(a=u.trys).length>0&&a[a.length-1])||6!==r[0]&&2!==r[0])){u=0;continue}if(3===r[0]&&(!a||r[1]>a[0]&&r[1]<a[3])){u.label=r[1];break}if(6===r[0]&&u.label<a[1]){u.label=a[1],a=r;break}if(a&&u.label<a[2]){u.label=a[2],u.ops.push(r);break}a[2]&&u.ops.pop(),u.trys.pop();continue}r=t.call(e,u)}catch(e){r=[6,e],i=0}finally{n=a=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,s])}}}(this,(function(c){switch(c.label){case 0:e=[],t=0,c.label=1;case 1:return t<s.length?(n=s[t],[4,d.readHoldingRegisters(n.address,1)]):[3,4];case 2:i=c.sent(),a=Object.keys(n.value)[0],r=o.keys[a],u=i.response.body.values[0],r!==u&&(o.keys[a]=u,e.push(((l={})[a]=u,l))),c.label=3;case 3:return t++,[3,1];case 4:return console.log(e),console.log("\n"),[2,Promise.resolve()]}}))},new((n=void 0)||(n=Promise))((function(a,r){function u(e){try{l(i.next(e))}catch(e){r(e)}}function s(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,s)}l((i=i.apply(e,t||[])).next())}))}()}))})),c.connect(f)}catch(e){console.log(e),l.unsubscribe()}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,