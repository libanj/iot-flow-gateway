(()=>{"use strict";var e={n:o=>{var n=o&&o.__esModule?()=>o.default:()=>o;return e.d(n,{a:n}),n},d:(o,n)=>{for(var r in n)e.o(n,r)&&!e.o(o,r)&&Object.defineProperty(o,r,{enumerable:!0,get:n[r]})},o:(e,o)=>Object.prototype.hasOwnProperty.call(e,o)};const o=require("jsmodbus");var n=e.n(o);const r=require("net");var t=new(e.n(r)().Socket),c=new(n().client.TCP)(t,1);t.on("connect",(function(){console.log("CONNECTED"),c.readHoldingRegisters(3e3,2).then((function(e){console.log(e.response.body)}),console.error)})),t.connect({host:"192.168.1.152",port:10502})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pb3QtZmxvdy1nYXRld2F5L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2lvdC1mbG93LWdhdGV3YXkvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vaW90LWZsb3ctZ2F0ZXdheS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vaW90LWZsb3ctZ2F0ZXdheS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2lvdC1mbG93LWdhdGV3YXkvZXh0ZXJuYWwgXCJqc21vZGJ1c1wiIiwid2VicGFjazovL2lvdC1mbG93LWdhdGV3YXkvZXh0ZXJuYWwgXCJuZXRcIiIsIndlYnBhY2s6Ly9pb3QtZmxvdy1nYXRld2F5Ly4vc3JjL2FwcC50cyJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZXhwb3J0cyIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInJlcXVpcmUiLCJzb2NrZXQiLCJjbGllbnQiLCJvbiIsImNvbnNvbGUiLCJsb2ciLCJyZWFkSG9sZGluZ1JlZ2lzdGVycyIsInRoZW4iLCJyZXNwIiwicmVzcG9uc2UiLCJib2R5IiwiZXJyb3IiLCJjb25uZWN0Il0sIm1hcHBpbmdzIjoibUJBQ0EsSUFBSUEsRUFBc0IsQ0NBMUIsRUFBeUJDLElBQ3hCLElBQUlDLEVBQVNELEdBQVVBLEVBQU9FLFdBQzdCLElBQU1GLEVBQWdCLFFBQ3RCLElBQU1BLEVBRVAsT0FEQUQsRUFBb0JJLEVBQUVGLEVBQVEsQ0FBRUcsRUFBR0gsSUFDNUJBLEdDTFIsRUFBd0IsQ0FBQ0ksRUFBU0MsS0FDakMsSUFBSSxJQUFJQyxLQUFPRCxFQUNYUCxFQUFvQlMsRUFBRUYsRUFBWUMsS0FBU1IsRUFBb0JTLEVBQUVILEVBQVNFLElBQzVFRSxPQUFPQyxlQUFlTCxFQUFTRSxFQUFLLENBQUVJLFlBQVksRUFBTUMsSUFBS04sRUFBV0MsTUNKM0UsRUFBd0IsQ0FBQ00sRUFBS0MsSUFBU0wsT0FBT00sVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsSUNBakYsTUFBTSxFQUErQkksUUFBUSxZLGFDQTdDLE1BQU0sRUFBK0JBLFFBQVEsTyxJQ3lCdkNDLEVBQVMsSSxNQUFJLFdBRWJDLEVBQVUsSUFBSSxnQkFBa0JELEVBRGQsR0FPeEJBLEVBQU9FLEdBQUcsV0FBVyxXQUNwQkMsUUFBUUMsSUFBSSxhQUNaSCxFQUFPSSxxQkFBcUIsSUFBTSxHQUFHQyxNQUFNLFNBQUNDLEdBQVdKLFFBQVFDLElBQUlHLEVBQUtDLFNBQVNDLFFBQVVOLFFBQVFPLFVBSXBHVixFQUFPVyxRQVhTLENBQ2YsS0FBUyxnQkFDVCxLQUFTLFMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IG1vZHVsZVsnZGVmYXVsdCddIDpcblx0XHQoKSA9PiBtb2R1bGU7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwianNtb2RidXNcIik7OyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwibmV0XCIpOzsiLCIvLyBpbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJ1xuLy8gaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSAgZnJvbSAnZXhwcmVzcyc7XG4vLyBpbXBvcnQgY29ycyBmcm9tICdjb3JzJztcbi8vIGltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJ1xuLy8gaW1wb3J0IHsgZGF0YSB9IGZyb20gJy4vbW9kZWxzL21vZGJ1cy9wYXlsb2FkLWRhdGEnXG5cbi8vIC8vIENyZWF0ZSBhIG5ldyBleHByZXNzIGFwcCBpbnN0YW5jZVxuLy8gY29uc3QgYXBwOiBleHByZXNzLkFwcGxpY2F0aW9uID0gZXhwcmVzcygpO1xuLy8gYXBwLnVzZShleHByZXNzLnVybGVuY29kZWQoe2V4dGVuZGVkOiB0cnVlfSkpO1xuLy8gYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG4vLyBhcHAudXNlKGNvcnMoe29yaWdpbjogdHJ1ZSwgY3JlZGVudGlhbHM6IHRydWV9KSk7XG5cblxuLy8gYXBwLmdldChcIi9cIiwgKHJlcTogYW55LCByZXM6IGFueSkgPT4gIHtcbi8vICAgcmVzLnNlbmQoZGF0YSk7XG4vLyB9KTtcblxuLy8gYXBwLmxpc3Rlbihwcm9jZXNzLmVudi5QT1JUIHx8IDgwODAsICgpID0+IHtcbi8vICAgY29uc29sZS5sb2coXCJBcHAgaXMgbGlzdGVuaW5nIG9uIHBvcnQgODA4MCFcIik7XG4vLyB9KTtcblxuLy8gY3JlYXRlIGEgdGNwIG1vZGJ1cyBjbGllbnRcbmltcG9ydCBNb2RidXMgZnJvbSAnanNtb2RidXMnO1xuaW1wb3J0IG5ldCBmcm9tICduZXQnO1xuXG5jb25zdCBzb2NrZXQgPSBuZXcgbmV0LlNvY2tldCgpXG5jb25zdCB1bml0SUQgOiBudW1iZXIgPSAxO1xuY29uc3QgY2xpZW50ICA9IG5ldyBNb2RidXMuY2xpZW50LlRDUChzb2NrZXQsIHVuaXRJRCk7XG5jb25zdCBvcHRpb25zID0ge1xuXHQnaG9zdCcgOiAnMTkyLjE2OC4xLjE1MicsXG5cdCdwb3J0JyA6IDEwNTAyXG59XG5cbnNvY2tldC5vbignY29ubmVjdCcsICgpID0+IHtcblx0Y29uc29sZS5sb2coXCJDT05ORUNURURcIik7XG5cdGNsaWVudC5yZWFkSG9sZGluZ1JlZ2lzdGVycygzMDAwLCAyKS50aGVuKCAocmVzcCkgPT4geyBjb25zb2xlLmxvZyhyZXNwLnJlc3BvbnNlLmJvZHkpOyB9LCBjb25zb2xlLmVycm9yKTtcblx0XG59KTtcblx0IFxuc29ja2V0LmNvbm5lY3Qob3B0aW9ucykiXSwic291cmNlUm9vdCI6IiJ9